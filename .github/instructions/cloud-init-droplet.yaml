#cloud-config
# DigitalOcean Droplet initialization for ebooks_lv deployment
# Purpose: Baseline hardening + create a bootstrap script (deferred repo clone & setup).
# This does NOT clone the repository automatically anymore.
# Workflow after creation:
#   1. SSH in (root or deploy)
#   2. Run: doctl auth init && doctl registry login (if private registry)
#   3. Execute bootstrap: sudo /usr/local/sbin/ebooks_lv_bootstrap.sh (or run as deploy)
#      - This clones the repo (if missing) and invokes interactive setup script inside repo.
#   4. Follow interactive prompts to populate /opt/ebooks_lv/.env and start the stack.

package_update: true
package_upgrade: true
packages:
  - ca-certificates
  - curl
  - gnupg
  - git
  - ufw
  - jq
  - unattended-upgrades

write_files:
  - path: /etc/docker/daemon.json
    owner: root:root
    permissions: '0644'
    content: |
      {
        "log-driver": "json-file",
        "log-opts": { "max-size": "10m", "max-file": "5" }
      }
  - path: /usr/local/sbin/ebooks_lv_bootstrap.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/usr/bin/env bash
      set -euo pipefail

      REPO_URL="https://github.com/parakletos-lab/ebooks_lv.git"
      APP_DIR="/opt/ebooks_lv"
      DO_TOKEN="${DO_TOKEN:-}"   # DigitalOcean token (optional)
      GH_TOKEN="${GH_TOKEN:-}"   # GitHub fine-grained PAT (repo contents:read)

      usage() {
        cat <<EOF
ebooks_lv bootstrap
Usage: $0 [--token <digitalocean_api_token>] [--gh-token <github_pat>] [--skip-registry] [--no-gh-prompt] [--no-submodules]

Options:
  --token <token>        DigitalOcean personal access token (avoids interactive prompt)
  --gh-token <token>     GitHub fine-grained PAT for private repo clone (read:contents). If omitted, will prompt.
  --no-gh-prompt         Do not prompt for GitHub token (assume public repo or GH_TOKEN env set)
  --skip-registry        Skip doctl auth + registry login steps
  --no-submodules        Skip git submodule initialization/update
  -h, --help             Show this help

Environment:
  DO_TOKEN               If set (and --token not provided) used for doctl auth init
  GH_TOKEN               If set (and --gh-token not provided) used for private clone

Workflow:
  1. (Optional) Auth & registry login (if not skipped)
  2. Clone or update repo (and submodules unless skipped)
  3. Run interactive setup script inside repo
EOF
      }

      SKIP_REG=0
      NO_GH_PROMPT=0
      NO_SUBMODULES=0
      while [[ $# -gt 0 ]]; do
        case "$1" in
          --token)
            DO_TOKEN="$2"; shift 2 ;;
          --gh-token)
            GH_TOKEN="$2"; shift 2 ;;
          --no-gh-prompt)
            NO_GH_PROMPT=1; shift ;;
          --no-submodules)
            NO_SUBMODULES=1; shift ;;
          --skip-registry)
            SKIP_REG=1; shift ;;
          -h|--help)
            usage; exit 0 ;;
          *) echo "Unknown arg: $1" >&2; usage; exit 1 ;;
        esac
      done

      ensure_doctl() {
        if command -v doctl >/dev/null 2>&1; then
          return 0
        fi
        echo "[bootstrap] doctl not found. Attempting lightweight install..." >&2
        TMP_DIR=$(mktemp -d)
        DOCTL_VERSION="1.111.0" # Pin for reproducibility
        ARCH="linux-amd64"
        URL="https://github.com/digitalocean/doctl/releases/download/v${DOCTL_VERSION}/doctl-${DOCTL_VERSION}-${ARCH}.tar.gz"
        if curl -fsSL "$URL" -o "$TMP_DIR/doctl.tgz"; then
          tar -xzf "$TMP_DIR/doctl.tgz" -C "$TMP_DIR" || true
          install -m 0755 "$TMP_DIR/doctl" /usr/local/bin/doctl || echo "[bootstrap] Failed to install doctl (permission?)" >&2
        else
          echo "[bootstrap] Could not download doctl; continuing without registry login capability." >&2
        fi
        rm -rf "$TMP_DIR"
      }

      do_doctl_auth() {
        if [ $SKIP_REG -eq 1 ]; then
          echo "[bootstrap] Skipping registry authentication (per flag)."; return 0; fi
        if ! command -v doctl >/dev/null 2>&1; then
          echo "[bootstrap] doctl unavailable; cannot authenticate. Use --skip-registry to suppress this message." >&2
          return 0
        fi
        if doctl auth list 2>/dev/null | grep -q 'Valid'; then
          echo "[bootstrap] doctl already authenticated."
        else
          if [ -n "$DO_TOKEN" ]; then
            echo "[bootstrap] Performing non-interactive doctl auth init."
            doctl auth init -t "$DO_TOKEN" || echo "[bootstrap] doctl auth failed" >&2
          else
            echo "[bootstrap] Launching interactive 'doctl auth init' (provide your API token)."
            doctl auth init || echo "[bootstrap] interactive auth failed" >&2
          fi
        fi
        echo "[bootstrap] Logging into container registry (if private)..."
        doctl registry login || echo "[bootstrap] registry login failed (maybe public?)" >&2
      }

      echo "[bootstrap] Starting ebooks_lv bootstrap..."
      if ! command -v docker >/dev/null 2>&1; then
        echo "[bootstrap] Docker is not installed (expected via Marketplace image)." >&2
        exit 1
      fi
      id deploy >/dev/null 2>&1 || useradd -m -s /bin/bash deploy || true
      usermod -aG docker deploy || true
      mkdir -p "${APP_DIR}" && chown deploy:deploy "${APP_DIR}"
      ensure_doctl || true
      do_doctl_auth || true

      if [ ! -d "${APP_DIR}/.git" ]; then
        if [ -z "$GH_TOKEN" ] && [ $NO_GH_PROMPT -eq 0 ]; then
          echo -n "[bootstrap] Enter GitHub fine-grained PAT (read-only) (leave blank if public): "
          read -rs GH_TOKEN_INPUT || true
          echo
          GH_TOKEN="${GH_TOKEN_INPUT:-}"; unset GH_TOKEN_INPUT || true
        fi
        if [ -n "$GH_TOKEN" ]; then
          echo "[bootstrap] Writing /home/deploy/.netrc for authenticated clone..."
          cat > /home/deploy/.netrc <<EOF
machine github.com
  login x-access-token
  password $GH_TOKEN
EOF
          chown deploy:deploy /home/deploy/.netrc
          chmod 600 /home/deploy/.netrc
        fi
        echo "[bootstrap] Cloning repository..."
        if [ $NO_SUBMODULES -eq 0 ]; then
          sudo -u deploy git clone --recurse-submodules "$REPO_URL" "$APP_DIR" || { echo "Clone failed" >&2; exit 2; }
        else
          sudo -u deploy git clone "$REPO_URL" "$APP_DIR" || { echo "Clone failed" >&2; exit 2; }
        fi
      else
        echo "[bootstrap] Repo already present; pulling latest..."
        sudo -u deploy git -C "$APP_DIR" pull --ff-only || echo "[bootstrap] git pull failed (continuing)" >&2
        if [ $NO_SUBMODULES -eq 0 ] && [ -f "$APP_DIR/.gitmodules" ]; then
          echo "[bootstrap] Updating submodules..."
          sudo -u deploy git -C "$APP_DIR" submodule sync --recursive || true
          sudo -u deploy git -C "$APP_DIR" submodule update --init --recursive || echo "[bootstrap] submodule update had issues" >&2
        fi
      fi

      # If freshly cloned without --recurse-submodules (because skip flag was off but .gitmodules appeared later), ensure submodules
      if [ $NO_SUBMODULES -eq 0 ] && [ -f "$APP_DIR/.gitmodules" ]; then
        # Detect if any submodule directories are empty / uninitialized
        MISSING_SM=$(grep -E 'path =' "$APP_DIR/.gitmodules" | awk '{print $3}' | while read -r p; do [ ! -d "$APP_DIR/$p/.git" ] && echo "$p"; done || true)
        if [ -n "$MISSING_SM" ]; then
          echo "[bootstrap] Initializing submodules..."
          sudo -u deploy git -C "$APP_DIR" submodule update --init --recursive || echo "[bootstrap] submodule init failed" >&2
        fi
      fi

      if [ ! -x "${APP_DIR}/scripts/ebooks_lv_setup.sh" ]; then
        echo "[bootstrap] Setup script missing; update repo." >&2
        exit 3
      fi

      echo "[bootstrap] Invoking interactive setup script..."
      sudo -u deploy "${APP_DIR}/scripts/ebooks_lv_setup.sh" "$@"
      echo "[bootstrap] Done."

runcmd:
  - echo "== Hardening & Docker setup =="
  - sed -i 's/^#\?Unattended-Upgrade::Remove-Unused-Kernel-Packages.*/Unattended-Upgrade::Remove-Unused-Kernel-Packages \"true\";/' /etc/apt/apt.conf.d/50unattended-upgrades || true
  - ufw allow OpenSSH
  - ufw allow 80/tcp
  - ufw allow 443/tcp
  - ufw --force enable
  # Docker already provided by Marketplace image; restart defensively (ignore failures if not present)
  - systemctl restart docker || true
  - echo "Cloud-init completed. Run: /usr/local/sbin/ebooks_lv_bootstrap.sh to begin interactive setup." 

final_message: "ebooks_lv droplet baseline complete. Run /usr/local/sbin/ebooks_lv_bootstrap.sh to set up application."
